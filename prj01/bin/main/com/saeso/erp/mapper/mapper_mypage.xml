<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.saeso.erp.dao.MypageDAO">



   <!-- 유저 닉네임, 매너온도 가져오기 -->
   <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
      select
          distinct m.nick   as "nick"
          ,nvl((select (select 36.5-count(*) from exp_apply ea left outer join exp_date ed on (ea.exp_no = ed.exp_no)
                  where ea.exp_no = 2     
                  and
                  (
                      ea.select_flag = 1
                      and
                      sysdate > ed.review_last_reg_date
                      and
                      review_url is null
                  ))
                  from member m where m.member_no=e.member_no),'36.5') as "manner"
      from
          EXP_APPLY e right outer join member m on e.member_no = m.member_no
      where
          m.member_email = #{member_email}
   </select>
   
   
   <!-- member_email 로 member_no 가져오기 -->
	<select id="getMemberNo" parameterType="String" resultType="int">
		select member_no from member where member_email = #{member_email}
	</select>


      
   <!-- 매너온도 몇도 내릴지 - 아영 확인완료 -->
   <select id="getReviewIsNullCnt" parameterType="com.saeso.erp.dto.UserDTO" resultType="int">
   select 
      count(*) from EXP_APPLY ea left outer join EXP_DATE ed on (ea.exp_no = ed.exp_no)
   where 
      ea.MEMBER_NO = ${member_no}
   and
       (
           ea.select_flag = 1
           and
           sysdate <![CDATA[>]]>  ed.REVIEW_LAST_REG_DATE
           and
           review_url is null
           
       )
   </select>
   
   
   
   <!-- 1. 신청한 체험 - applExpList - 아영 확인완료-->
   <select id="getApplExpList" parameterType="com.saeso.erp.dto.UserDTO" resultType="java.util.HashMap">
   select  
      ex.EXP_NO AS "exp_no",
        ex.thumb_img as "exp_thumb_img",
        br.brand_name AS "brand_name",
      ex.title as "exp_title",
      
        ex.provide_short as "exp_prov_sh",
        ex.select_user_num as "selec_num",
        (select count(*) from EXP_APPLY ea where ea.exp_no = ex.exp_no) AS "appl_num"
        
        
              <!-- 21.10.24 추가, member_no 이 있다면, 체험별 좋아요 수 검색 -->
      <if test="member_no != 0">
         ,(select count(*) from LIKES ls where ls.MEMBER_NO = #{member_no} and ls.EXP_NO = ex.exp_no) as "did_like" 
      </if>   
      <!-- /21.10.24 추가 -->
   from 
      EXP ex inner join BRAND br on ex.ceo_no=br.ceo_no
   where 
      exp_no in (
                     select 
                        ea.exp_no
                     from 
                        MEMBER u inner join EXP_APPLY ea on u.member_no = ea.member_no and u.member_no = ${member_no}
                            inner join EXP_DATE ed on ea.exp_no = ed.exp_no and sysdate <![CDATA[<]]> SELECT_ANNOUNCE_DATE 
                     )
   
   
   </select>
   
   <!-- 2. 후기 등록이 필요한 체험 - revNeedExpList - 아영 확인완료-->
   <select id="getRevNeedExpList" parameterType="com.saeso.erp.dto.UserDTO" resultType="java.util.HashMap">
   SELECT
      ex.EXP_NO AS "exp_no",
      ex.thumb_img AS "exp_thumb_img",
      br.brand_name AS "brand_name",
      ex.title AS "exp_title",
      ea.member_no AS "user_no",
      ceil(ed.REVIEW_LAST_REG_DATE - sysdate) as "rev_dday"
              ,ex.provide_short as "exp_prov_sh"
     
   FROM
      (((EXP_APPLY ea LEFT OUTER JOIN EXP ex ON ea.EXP_NO = ex.EXP_NO)
      LEFT OUTER JOIN BRAND br ON ex.CEO_NO = br.CEO_NO)
      LEFT OUTER JOIN EXP_DATE ed ON ex.EXP_NO = ed.EXP_NO)
   WHERE
         ea.member_no = ${member_no}
      AND
         ea.select_flag = 1
      AND
         (SYSDATE BETWEEN ed.REVIEW_START_REG_DATE AND ed.REVIEW_LAST_REG_DATE)
      AND 
         ea.review_url IS NULL

   
   </select>
   
   <!-- 3. 종료된 체험 endExpList - 아영 확인완료-->
   <select id="getEndExpList" parameterType="com.saeso.erp.dto.UserDTO" resultType="java.util.HashMap">
   SELECT
         ex.EXP_NO AS "exp_no",
         ex.thumb_img as "exp_thumb_img",
         br.brand_name AS "brand_name",
         ex.title as "exp_title"
                       ,ex.provide_short as "exp_prov_sh"
         
   FROM
      (((EXP_APPLY ea LEFT OUTER JOIN EXP ex ON ea.EXP_NO = ex.EXP_NO)
      LEFT OUTER JOIN BRAND br ON ex.CEO_NO = br.CEO_NO)
      LEFT OUTER JOIN EXP_DATE ed ON ex.EXP_NO = ed.EXP_NO)
   WHERE
      ea.member_no = ${member_no}
      AND
      ea.select_flag = 1
      AND (SYSDATE > ed.REVIEW_LAST_REG_DATE OR ea.review_url IS NOT NULL)
   </select>

   
   
   
   
   
   
   <!-- 후기 등록하기 -->
   <update id="updateRevReg" parameterType="com.saeso.erp.dto.ExpApplDTO">
      update 
         exp_apply
      set      
          select_flag = 1      
         , review_url = #{review_url}         
         , SATISFACTION_LEVEL = #{satisfaction_level}         
         , REBUY_FLAG = #{rebuy_flag}          
         , REVIEW_REG_DATE = sysdate
         where
            exp_no = #{exp_no}         
            and
            <!--****************************-->
            <!--member_no 수정한 부분-->
            member_no = #{member_no}
            <!--****************************-->
   </update>
   
   
      
   <!-- 내 정보 수정 -->
   <select id="getInfo" parameterType="int" resultType="com.saeso.erp.dto.UserDTO">
      select 
         member_no        "member_no"
         ,member_email     "member_email"
         ,member_pw         "member_pw"
         ,member_name     "member_name" 
         ,nick          "nick"
         ,phone           "phone"
         ,jumin_num        "jumin_num"
         ,reg_date        "reg_date"
         ,delivery_name    "delivery_name"
         ,zipcode         "zipcode"
         ,addr1         "addr1"
         ,addr2         "addr2"
      from 
         member
      where
         member_no=#{member_no}
   </select>
   <update id="updateInfo" parameterType="com.saeso.erp.dto.UserDTO">
      update
         member
      set
         member_name = #{member_name}
         ,nick = #{nick} 
         ,phone = #{phone}       
         ,jumin_num = #{jumin_num}       
         ,zipcode = #{zipcode}     
         ,addr1 = #{addr1}
         ,addr2 = #{addr2}
      where
         member_no=#{member_no}
   </update>
   <update id="updatePw" parameterType="com.saeso.erp.dto.UserDTO">
      update
         member
      set
         member_pw = #{member_pw, jdbcType=VARCHAR}
      where
         member_no=#{member_no}
   </update>
   
   
   <!-- 유저 주민번호 개수 가져오기  -->
   <select id="getjuminNumCnt"  parameterType="com.saeso.erp.dto.UserDTO" resultType="int">
		select
		    count(*)
		from
		    member
		where
		    jumin_num=#{jumin_num} and member_no != #{member_no}
   </select>
   

   <!-- 유저 닉네임 개수 가져오기 -->
   <select id="getNickCnt"  parameterType="com.saeso.erp.dto.UserDTO" resultType="int">
   		select
		    count(*)
		from
		    member
		where
		    nick=#{nick} and member_no != #{member_no}
   </select>
   
   
      <!-- 좋아요 페이지 - 신청일 기간에 있는 내가 좋아요한 체험 리스트  -->
   <select id="getLikeExpList" parameterType="com.saeso.erp.dto.UserDTO" resultType="java.util.HashMap">
     select 
      ex.TITLE as "title",
      ex.THUMB_IMG as "thumb_img",
      br.brand_name as "brand_name",
      (select count(*) from EXP_APPLY ea where ea.exp_no = ex.exp_no) AS "appl_num",
      ex.select_user_num as "select_user_num"
      ,ex.PROVIDE_SHORT as "provide_short"
      ,ex.exp_no as "exp_no"
      <!-- 21.10.24 추가, member_no 이 있다면, 체험별 좋아요 수 검색 -->
      <if test="member_no != 0">
         ,(select count(*) from LIKES ls where ls.MEMBER_NO = #{member_no} and ls.EXP_NO = ex.exp_no) as "did_like" 
      </if>   
      <!-- /21.10.24 추가 -->
      ,ceil(ed.EXP_LAST_APPLY_DATE - sysdate) as "appl_dday"
   from 
       ((((exp ex left outer join likes li on ex.exp_no = li.exp_no) 
       left outer join member me on me.member_no = li.member_no)
       left outer join brand br on ex.ceo_no = br.ceo_no))
       left outer join EXP_DATE ed on ex.exp_no = ed.exp_no
   where 
         li.member_no = ${member_no}
      and 
         (sysdate between EXP_START_APPLY_DATE and EXP_LAST_APPLY_DATE)
   </select>
   
</mapper>